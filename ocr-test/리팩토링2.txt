# 로스트아크 OCR 모듈 리팩토링 종합 계획 

## 1. 리팩토링 개요

### 현재 시스템 구조 분석
현재 시스템은 OCR을 통해 추출한 캐릭터 닉네임을 각각 데이터베이스에 조회하는 방식으로 작동합니다. 이는 다음과 같은 문제점이 있습니다:

1. **과도한 API 호출**: 캐릭터마다 개별적으로 API를 호출하여 서버 부하 발생
2. **느린 처리 속도**: 순차적 처리로 인해 여러 캐릭터 정보 조회 시 시간이 오래 걸림
3. **비효율적인 데이터베이스 쿼리**: 단일 캐릭터 조회 쿼리가 반복적으로 실행됨

### 리팩토링 목표
1. **API 호출 최소화**: 여러 캐릭터 정보를 한 번의 요청으로 처리
2. **처리 속도 향상**: 병렬 처리 및 데이터베이스 쿼리 최적화
3. **사용자 경험 개선**: 빠른 응답 시간으로 사용자 만족도 향상
4. **코드 유지보수성 강화**: 모듈화된 코드 구조로 개발 및 유지보수 용이성 향상

### 리팩토링 주요 방향
1. **다중 캐릭터 쿼리 기능 추가**: 한 번의 API 호출로 여러 캐릭터 정보 조회
2. **데이터베이스 접근 최적화**: IN 절을 활용한, 효율적인 다중 레코드 조회
3. **클라이언트 단 개선**: 배치 처리를 지원하는 JavaScript 모듈 개발
4. **에러 처리 강화**: 안정적인 시스템 운영을 위한 예외 처리 개선

## 2. 리팩토링 세부 계획

### 2.1 백엔드 - 모델 계층 개선 (우선순위: 높음)

#### 2.1.1 `lopecCharacter-model.php` 파일 수정:

1. 다중 캐릭터 조회를 위한 새로운 메서드 추가:
   - 여러 캐릭터의 닉네임을 받아 한 번에 조회하는 함수 구현
   - 필요한 필드만 선택하여 데이터 효율성 향상
   - IN 절을 활용한 SQL 쿼리 최적화

2. 바인딩 파라미터 처리 개선:
   - IN 절의 파라미터를 효과적으로 처리하기 위한 유틸리티 함수 추가
   - 모델 클래스 내 헬퍼 메서드로 구현하는 것이 좋음

3. 조회할 필드 최적화:
   - 필요한 필드만 선택하여 데이터 전송량 최소화
   - LCHA_CHARACTER_NICKNAME, LCHA_TOTALSUM, LCHA_TOTALSUMSUPPORT 등 필수 필드 중심

### 2.2 백엔드 - 컨트롤러 계층 개선 (우선순위: 높음)

#### 2.2.1 `lopecCharacter-controller.php` 파일 수정:

1. 다중 캐릭터 조회 컨트롤러 메서드 추가:
   - 모델의 다중 조회 메서드를 호출하는 컨트롤러 함수 구현
   - 닉네임 배열을 전처리하여 유효한 형태로 변환
   - 쿼리 결과를 클라이언트 친화적인 형태로 가공

2. 오류 처리 개선:
   - 구체적인 오류 메시지 반환
   - 로깅 강화를 통한 디버깅 용이성 확보

3. 결과 데이터 최적화:
   - 클라이언트에 필요한 형태로 데이터 가공
   - 닉네임을 키로 하는 연관 배열 구조 고려

### 2.3 백엔드 - API 엔드포인트 추가 (우선순위: 높음)

#### 2.3.1 `index-read.php` 파일 수정:

1. 다중 캐릭터 조회 케이스 추가:
   - 'batchQueryCharacters' 케이스 추가
   - JSON 형태로 전달된 닉네임 목록 처리
   - 컨트롤러 메서드 호출 및 결과 반환

2. 응답 최적화:
   - 각 캐릭터별 상태 정보 포함
   - 닉네임을 키로 하는 객체 구조 반환

3. 최대 요청 닉네임 수 제한:
   - 과도한 요청 방지를 위한 제한 설정 (예: 최대 20개)
   - 제한 초과 시 적절한 오류 메시지 반환

### 2.4 프론트엔드 - JavaScript 모듈 개선 (우선순위: 중간)

#### 2.4.1 `characterRead-test.js` 파일 수정:

1. 다중 캐릭터 조회 함수 추가:
   - 여러 캐릭터 닉네임을 배열로 받아 일괄 처리하는 함수 구현
   - 요청 데이터를 JSON 형태로 변환하여 전송
   - 응답 처리 및 오류 핸들링 개선

2. Promise 객체 반환:
   - Promise를 반환하여 비동기 처리 개선
   - 오류 처리 강화

3. 결과 캐싱 기능:
   - 동일 요청 방지를 위한 캐싱 메커니즘 추가
   - 세션 유지 시간 동안 결과 저장

### 2.5 프론트엔드 - OCR 통합 모듈 개선 (우선순위: 중간)

#### 2.5.1 `ocr-integration-test.js` 파일 수정:

1. 다중 캐릭터 처리 로직 변경:
   - 순차 처리 방식에서 배치 처리 방식으로 전환
   - 캐릭터 정보를 테이블에 표시하는 UI 로직 유지
   - 다중 조회 함수를 활용한 데이터 처리

2. UI 업데이트 최적화:
   - 일괄 처리 결과를 효율적으로 표시
   - 결과 없는 캐릭터에 대한 처리 개선

3. 오류 복구 메커니즘:
   - 배치 처리 실패 시 개별 조회로 전환하는 폴백 전략
   - 네트워크 오류에 대한 처리 강화

### 2.6 테스트 및 디버깅 계획 (우선순위: 낮음)

1. **단위 테스트**:
   - 개별 기능에 대한 테스트 케이스 작성
   - 다양한 입력 값에 대한 응답 확인

2. **통합 테스트**:
   - 엔드 투 엔드 시나리오 테스트
   - 여러 캐릭터를 포함한 OCR 처리 흐름 검증

3. **성능 테스트**:
   - 리팩토링 전후 처리 시간 비교
   - 다양한 수의 캐릭터에 대한 처리 속도 측정

4. **오류 처리 테스트**:
   - 비정상적인 입력에 대한 시스템 반응 확인
   - 네트워크 오류, 데이터베이스 오류 등의 예외 상황 테스트

## 3. 구현 순서 및 일정

### 1단계: 백엔드 인프라 구축 (1일)
1. 모델 계층에 다중 캐릭터 조회 메서드 추가
2. 컨트롤러 계층에 다중 캐릭터 처리 메서드 구현
3. 새로운 API 엔드포인트 케이스 추가 및 테스트

### 2단계: 프론트엔드 개선 (1일)
1. JavaScript 다중 조회 함수 구현
2. OCR 통합 모듈 배치 처리 기능 추가
3. UI 업데이트 로직 최적화

### 3단계: 테스트 및 최적화 (1-2일)
1. 기능 테스트 및 버그 수정
2. 성능 측정 및 최적화
3. 코드 리뷰 및 리팩토링

### 4단계: 배포 및 모니터링 (1일)
1. 개발 환경에서 테스트 완료 후 스테이징 환경 배포
2. 스테이징 환경에서의 테스트 및 버그 수정
3. 프로덕션 환경 배포 및 모니터링

## 4. 리팩토링 이점 및 예상 효과

### 성능 측면
- **API 호출 감소**: 16개 캐릭터 처리 시 API 호출이 16번에서 1번으로 감소 (약 94% 감소)
- **처리 시간 단축**: 순차 처리 대비 약 70-80% 시간 단축 예상
- **서버 부하 감소**: 데이터베이스 쿼리 및 API 요청 감소로 서버 자원 절약

### 사용자 경험 측면
- **반응 속도 향상**: 사용자는 더 빠른 결과를 얻을 수 있음
- **안정성 향상**: 오류 처리 개선으로 예외 상황에서도 일관된 경험 제공
- **UI 개선**: 일괄 처리 결과를 더 효율적으로 표시하여 정보 가독성 향상

### 개발 및 유지보수 측면
- **코드 모듈화**: 기능별 모듈화로 유지보수 용이성 향상
- **확장성 강화**: 새로운 기능 추가 시 기존 구조를 활용 가능
- **오류 추적 용이**: 강화된 로깅 및 예외 처리로 디버깅 과정 간소화

## 5. 잠재적 위험 및 대응 계획

### 위험 요소
1. **데이터베이스 성능 이슈**: 많은 캐릭터를 한 번에 조회할 때 DB 부하 발생 가능
2. **API 응답 시간 증가**: 대량 데이터 처리로 인한 응답 지연 가능성
3. **클라이언트 측 메모리 사용량 증가**: 많은 데이터를 한 번에 받아 처리할 때 발생 가능

### 대응 계획
1. **쿼리 최적화**: 인덱스 활용 및 필요한 필드만 선택하여 조회 최적화
2. **캐릭터 수 제한**: 한 번에 처리할 캐릭터 수를 적절히 제한 (예: 최대 20개)
3. **응답 데이터 최적화**: 필요한 정보만 포함하여 응답 크기 최소화
4. **폴백 메커니즘**: 배치 처리 실패 시 개별 처리로 전환하는 대체 로직 구현

이 계획을 통해 OCR 모듈의 성능과 사용자 경험을 대폭 향상시킬 수 있을 것으로 기대됩니다. 퇴근 후 이 계획에 따라 구현을 진행하시면 효율적인 작업이 가능할 것입니다.
